<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentToken implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'PaymentToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'issue_date' => 'string',
        'token' => 'string',
        'expiry_date_time' => 'string',
        'status' => 'string',
        'payment_instrument_category_code' => 'string',
        'payment_instrument_name' => 'string',
        'truncated_payment_instrument' => 'string',
        'payment_instrument_association_name' => 'string',
        'payment_instrument_type' => 'string',
        'payment_instrument_message_sequence' => 'string',
        'default_payment_instrument' => 'bool',
        'payment_instrument_expiry_date' => 'string',
        'additional_payment_token_information' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'issue_date' => null,
        'token' => null,
        'expiry_date_time' => null,
        'status' => null,
        'payment_instrument_category_code' => null,
        'payment_instrument_name' => null,
        'truncated_payment_instrument' => null,
        'payment_instrument_association_name' => null,
        'payment_instrument_type' => null,
        'payment_instrument_message_sequence' => null,
        'default_payment_instrument' => null,
        'payment_instrument_expiry_date' => null,
        'additional_payment_token_information' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'issue_date' => false,
        'token' => false,
        'expiry_date_time' => false,
        'status' => false,
        'payment_instrument_category_code' => false,
        'payment_instrument_name' => false,
        'truncated_payment_instrument' => false,
        'payment_instrument_association_name' => false,
        'payment_instrument_type' => false,
        'payment_instrument_message_sequence' => false,
        'default_payment_instrument' => false,
        'payment_instrument_expiry_date' => false,
        'additional_payment_token_information' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'issue_date' => 'issueDate',
        'token' => 'token',
        'expiry_date_time' => 'expiryDateTime',
        'status' => 'status',
        'payment_instrument_category_code' => 'paymentInstrumentCategoryCode',
        'payment_instrument_name' => 'paymentInstrumentName',
        'truncated_payment_instrument' => 'truncatedPaymentInstrument',
        'payment_instrument_association_name' => 'paymentInstrumentAssociationName',
        'payment_instrument_type' => 'paymentInstrumentType',
        'payment_instrument_message_sequence' => 'paymentInstrumentMessageSequence',
        'default_payment_instrument' => 'defaultPaymentInstrument',
        'payment_instrument_expiry_date' => 'paymentInstrumentExpiryDate',
        'additional_payment_token_information' => 'additionalPaymentTokenInformation',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'issue_date' => 'setIssueDate',
        'token' => 'setToken',
        'expiry_date_time' => 'setExpiryDateTime',
        'status' => 'setStatus',
        'payment_instrument_category_code' => 'setPaymentInstrumentCategoryCode',
        'payment_instrument_name' => 'setPaymentInstrumentName',
        'truncated_payment_instrument' => 'setTruncatedPaymentInstrument',
        'payment_instrument_association_name' => 'setPaymentInstrumentAssociationName',
        'payment_instrument_type' => 'setPaymentInstrumentType',
        'payment_instrument_message_sequence' => 'setPaymentInstrumentMessageSequence',
        'default_payment_instrument' => 'setDefaultPaymentInstrument',
        'payment_instrument_expiry_date' => 'setPaymentInstrumentExpiryDate',
        'additional_payment_token_information' => 'setAdditionalPaymentTokenInformation',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'issue_date' => 'getIssueDate',
        'token' => 'getToken',
        'expiry_date_time' => 'getExpiryDateTime',
        'status' => 'getStatus',
        'payment_instrument_category_code' => 'getPaymentInstrumentCategoryCode',
        'payment_instrument_name' => 'getPaymentInstrumentName',
        'truncated_payment_instrument' => 'getTruncatedPaymentInstrument',
        'payment_instrument_association_name' => 'getPaymentInstrumentAssociationName',
        'payment_instrument_type' => 'getPaymentInstrumentType',
        'payment_instrument_message_sequence' => 'getPaymentInstrumentMessageSequence',
        'default_payment_instrument' => 'getDefaultPaymentInstrument',
        'payment_instrument_expiry_date' => 'getPaymentInstrumentExpiryDate',
        'additional_payment_token_information' => 'getAdditionalPaymentTokenInformation',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('issue_date', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('expiry_date_time', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('payment_instrument_category_code', $data ?? [], null);
        $this->setIfExists('payment_instrument_name', $data ?? [], null);
        $this->setIfExists('truncated_payment_instrument', $data ?? [], null);
        $this->setIfExists('payment_instrument_association_name', $data ?? [], null);
        $this->setIfExists('payment_instrument_type', $data ?? [], null);
        $this->setIfExists('payment_instrument_message_sequence', $data ?? [], null);
        $this->setIfExists('default_payment_instrument', $data ?? [], null);
        $this->setIfExists('payment_instrument_expiry_date', $data ?? [], null);
        $this->setIfExists('additional_payment_token_information', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['default_payment_instrument'] === null) {
            $invalidProperties[] = "'default_payment_instrument' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets issue_date
     *
     * @return null|string
     */
    public function getIssueDate(): mixed
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param null|string $issue_date issue_date
     */
    public function setIssueDate(mixed $issue_date): static
    {
        if (is_null($issue_date)) {
            throw new \InvalidArgumentException('non-nullable issue_date cannot be null');
        }
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets token
     *
     * @return null|string
     */
    public function getToken(): mixed
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param null|string $token token
     */
    public function setToken(mixed $token): static
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets expiry_date_time
     *
     * @return null|string
     */
    public function getExpiryDateTime(): mixed
    {
        return $this->container['expiry_date_time'];
    }

    /**
     * Sets expiry_date_time
     *
     * @param null|string $expiry_date_time expiry_date_time
     */
    public function setExpiryDateTime(mixed $expiry_date_time): static
    {
        if (is_null($expiry_date_time)) {
            throw new \InvalidArgumentException('non-nullable expiry_date_time cannot be null');
        }
        $this->container['expiry_date_time'] = $expiry_date_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return null|string
     */
    public function getStatus(): mixed
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param null|string $status status
     */
    public function setStatus(mixed $status): static
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_instrument_category_code
     *
     * @return null|string
     */
    public function getPaymentInstrumentCategoryCode(): mixed
    {
        return $this->container['payment_instrument_category_code'];
    }

    /**
     * Sets payment_instrument_category_code
     *
     * @param null|string $payment_instrument_category_code payment_instrument_category_code
     */
    public function setPaymentInstrumentCategoryCode(mixed $payment_instrument_category_code): static
    {
        if (is_null($payment_instrument_category_code)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_category_code cannot be null');
        }
        $this->container['payment_instrument_category_code'] = $payment_instrument_category_code;

        return $this;
    }

    /**
     * Gets payment_instrument_name
     *
     * @return null|string
     */
    public function getPaymentInstrumentName(): mixed
    {
        return $this->container['payment_instrument_name'];
    }

    /**
     * Sets payment_instrument_name
     *
     * @param null|string $payment_instrument_name payment_instrument_name
     */
    public function setPaymentInstrumentName(mixed $payment_instrument_name): static
    {
        if (is_null($payment_instrument_name)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_name cannot be null');
        }
        $this->container['payment_instrument_name'] = $payment_instrument_name;

        return $this;
    }

    /**
     * Gets truncated_payment_instrument
     *
     * @return null|string
     */
    public function getTruncatedPaymentInstrument(): mixed
    {
        return $this->container['truncated_payment_instrument'];
    }

    /**
     * Sets truncated_payment_instrument
     *
     * @param null|string $truncated_payment_instrument truncated_payment_instrument
     */
    public function setTruncatedPaymentInstrument(mixed $truncated_payment_instrument): static
    {
        if (is_null($truncated_payment_instrument)) {
            throw new \InvalidArgumentException('non-nullable truncated_payment_instrument cannot be null');
        }
        $this->container['truncated_payment_instrument'] = $truncated_payment_instrument;

        return $this;
    }

    /**
     * Gets payment_instrument_association_name
     *
     * @return null|string
     */
    public function getPaymentInstrumentAssociationName(): mixed
    {
        return $this->container['payment_instrument_association_name'];
    }

    /**
     * Sets payment_instrument_association_name
     *
     * @param null|string $payment_instrument_association_name payment_instrument_association_name
     */
    public function setPaymentInstrumentAssociationName(mixed $payment_instrument_association_name): static
    {
        if (is_null($payment_instrument_association_name)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_association_name cannot be null');
        }
        $this->container['payment_instrument_association_name'] = $payment_instrument_association_name;

        return $this;
    }

    /**
     * Gets payment_instrument_type
     *
     * @return null|string
     */
    public function getPaymentInstrumentType(): mixed
    {
        return $this->container['payment_instrument_type'];
    }

    /**
     * Sets payment_instrument_type
     *
     * @param null|string $payment_instrument_type payment_instrument_type
     */
    public function setPaymentInstrumentType(mixed $payment_instrument_type): static
    {
        if (is_null($payment_instrument_type)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_type cannot be null');
        }
        $this->container['payment_instrument_type'] = $payment_instrument_type;

        return $this;
    }

    /**
     * Gets payment_instrument_message_sequence
     *
     * @return null|string
     */
    public function getPaymentInstrumentMessageSequence(): mixed
    {
        return $this->container['payment_instrument_message_sequence'];
    }

    /**
     * Sets payment_instrument_message_sequence
     *
     * @param null|string $payment_instrument_message_sequence payment_instrument_message_sequence
     */
    public function setPaymentInstrumentMessageSequence(mixed $payment_instrument_message_sequence): static
    {
        if (is_null($payment_instrument_message_sequence)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_message_sequence cannot be null');
        }
        $this->container['payment_instrument_message_sequence'] = $payment_instrument_message_sequence;

        return $this;
    }

    /**
     * Gets default_payment_instrument
     *
     * @return bool
     */
    public function getDefaultPaymentInstrument(): mixed
    {
        return $this->container['default_payment_instrument'];
    }

    /**
     * Sets default_payment_instrument
     *
     * @param bool $default_payment_instrument default_payment_instrument
     */
    public function setDefaultPaymentInstrument(mixed $default_payment_instrument): static
    {
        if (is_null($default_payment_instrument)) {
            throw new \InvalidArgumentException('non-nullable default_payment_instrument cannot be null');
        }
        $this->container['default_payment_instrument'] = $default_payment_instrument;

        return $this;
    }

    /**
     * Gets payment_instrument_expiry_date
     *
     * @return null|string
     */
    public function getPaymentInstrumentExpiryDate(): mixed
    {
        return $this->container['payment_instrument_expiry_date'];
    }

    /**
     * Sets payment_instrument_expiry_date
     *
     * @param null|string $payment_instrument_expiry_date payment_instrument_expiry_date
     */
    public function setPaymentInstrumentExpiryDate(mixed $payment_instrument_expiry_date): static
    {
        if (is_null($payment_instrument_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_expiry_date cannot be null');
        }
        $this->container['payment_instrument_expiry_date'] = $payment_instrument_expiry_date;

        return $this;
    }

    /**
     * Gets additional_payment_token_information
     *
     * @return null|string
     */
    public function getAdditionalPaymentTokenInformation(): mixed
    {
        return $this->container['additional_payment_token_information'];
    }

    /**
     * Sets additional_payment_token_information
     *
     * @param null|string $additional_payment_token_information additional_payment_token_information
     */
    public function setAdditionalPaymentTokenInformation(mixed $additional_payment_token_information): static
    {
        if (is_null($additional_payment_token_information)) {
            throw new \InvalidArgumentException('non-nullable additional_payment_token_information cannot be null');
        }
        $this->container['additional_payment_token_information'] = $additional_payment_token_information;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


