<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class Recurring2 implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'Recurring2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'category' => '\VodaPayGatewayClient\Model\Category2',
        'frequency' => '\VodaPayGatewayClient\Model\FrequencyCodes2',
        'first_payment_date' => '\DateTime',
        'last_payment_date' => '\DateTime',
        'number_of_installments' => 'int',
        'regular_payment_day' => 'int',
        'amount' => 'int',
        'amount_limit' => 'int',
        'payment_instrument_minimum_validity_period' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'category' => null,
        'frequency' => null,
        'first_payment_date' => 'date-time',
        'last_payment_date' => 'date-time',
        'number_of_installments' => 'int32',
        'regular_payment_day' => 'int32',
        'amount' => 'int32',
        'amount_limit' => 'int32',
        'payment_instrument_minimum_validity_period' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'category' => false,
        'frequency' => false,
        'first_payment_date' => false,
        'last_payment_date' => false,
        'number_of_installments' => false,
        'regular_payment_day' => false,
        'amount' => false,
        'amount_limit' => false,
        'payment_instrument_minimum_validity_period' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'category' => 'category',
        'frequency' => 'frequency',
        'first_payment_date' => 'firstPaymentDate',
        'last_payment_date' => 'lastPaymentDate',
        'number_of_installments' => 'numberOfInstallments',
        'regular_payment_day' => 'regularPaymentDay',
        'amount' => 'amount',
        'amount_limit' => 'amountLimit',
        'payment_instrument_minimum_validity_period' => 'paymentInstrumentMinimumValidityPeriod',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'category' => 'setCategory',
        'frequency' => 'setFrequency',
        'first_payment_date' => 'setFirstPaymentDate',
        'last_payment_date' => 'setLastPaymentDate',
        'number_of_installments' => 'setNumberOfInstallments',
        'regular_payment_day' => 'setRegularPaymentDay',
        'amount' => 'setAmount',
        'amount_limit' => 'setAmountLimit',
        'payment_instrument_minimum_validity_period' => 'setPaymentInstrumentMinimumValidityPeriod',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'category' => 'getCategory',
        'frequency' => 'getFrequency',
        'first_payment_date' => 'getFirstPaymentDate',
        'last_payment_date' => 'getLastPaymentDate',
        'number_of_installments' => 'getNumberOfInstallments',
        'regular_payment_day' => 'getRegularPaymentDay',
        'amount' => 'getAmount',
        'amount_limit' => 'getAmountLimit',
        'payment_instrument_minimum_validity_period' => 'getPaymentInstrumentMinimumValidityPeriod',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('first_payment_date', $data ?? [], null);
        $this->setIfExists('last_payment_date', $data ?? [], null);
        $this->setIfExists('number_of_installments', $data ?? [], null);
        $this->setIfExists('regular_payment_day', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_limit', $data ?? [], null);
        $this->setIfExists('payment_instrument_minimum_validity_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['frequency'] === null) {
            $invalidProperties[] = "'frequency' can't be null";
        }
        if ($this->container['payment_instrument_minimum_validity_period'] === null) {
            $invalidProperties[] = "'payment_instrument_minimum_validity_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \VodaPayGatewayClient\Model\Category2
     */
    public function getCategory(): mixed
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \VodaPayGatewayClient\Model\Category2 $category category
     */
    public function setCategory(mixed $category): static
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return \VodaPayGatewayClient\Model\FrequencyCodes2
     */
    public function getFrequency(): mixed
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param \VodaPayGatewayClient\Model\FrequencyCodes2 $frequency frequency
     */
    public function setFrequency(mixed $frequency): static
    {
        if (is_null($frequency)) {
            throw new \InvalidArgumentException('non-nullable frequency cannot be null');
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets first_payment_date
     *
     * @return null|\DateTime
     */
    public function getFirstPaymentDate(): mixed
    {
        return $this->container['first_payment_date'];
    }

    /**
     * Sets first_payment_date
     *
     * @param null|\DateTime $first_payment_date first_payment_date
     */
    public function setFirstPaymentDate(mixed $first_payment_date): static
    {
        if (is_null($first_payment_date)) {
            throw new \InvalidArgumentException('non-nullable first_payment_date cannot be null');
        }
        $this->container['first_payment_date'] = $first_payment_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return null|\DateTime
     */
    public function getLastPaymentDate(): mixed
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param null|\DateTime $last_payment_date last_payment_date
     */
    public function setLastPaymentDate(mixed $last_payment_date): static
    {
        if (is_null($last_payment_date)) {
            throw new \InvalidArgumentException('non-nullable last_payment_date cannot be null');
        }
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets number_of_installments
     *
     * @return null|int
     */
    public function getNumberOfInstallments(): mixed
    {
        return $this->container['number_of_installments'];
    }

    /**
     * Sets number_of_installments
     *
     * @param null|int $number_of_installments number_of_installments
     */
    public function setNumberOfInstallments(mixed $number_of_installments): static
    {
        if (is_null($number_of_installments)) {
            throw new \InvalidArgumentException('non-nullable number_of_installments cannot be null');
        }
        $this->container['number_of_installments'] = $number_of_installments;

        return $this;
    }

    /**
     * Gets regular_payment_day
     *
     * @return null|int
     */
    public function getRegularPaymentDay(): mixed
    {
        return $this->container['regular_payment_day'];
    }

    /**
     * Sets regular_payment_day
     *
     * @param null|int $regular_payment_day regular_payment_day
     */
    public function setRegularPaymentDay(mixed $regular_payment_day): static
    {
        if (is_null($regular_payment_day)) {
            throw new \InvalidArgumentException('non-nullable regular_payment_day cannot be null');
        }
        $this->container['regular_payment_day'] = $regular_payment_day;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return null|int
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param null|int $amount amount
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_limit
     *
     * @return null|int
     */
    public function getAmountLimit(): mixed
    {
        return $this->container['amount_limit'];
    }

    /**
     * Sets amount_limit
     *
     * @param null|int $amount_limit amount_limit
     */
    public function setAmountLimit(mixed $amount_limit): static
    {
        if (is_null($amount_limit)) {
            throw new \InvalidArgumentException('non-nullable amount_limit cannot be null');
        }
        $this->container['amount_limit'] = $amount_limit;

        return $this;
    }

    /**
     * Gets payment_instrument_minimum_validity_period
     *
     * @return int
     */
    public function getPaymentInstrumentMinimumValidityPeriod(): mixed
    {
        return $this->container['payment_instrument_minimum_validity_period'];
    }

    /**
     * Sets payment_instrument_minimum_validity_period
     *
     * @param int $payment_instrument_minimum_validity_period payment_instrument_minimum_validity_period
     */
    public function setPaymentInstrumentMinimumValidityPeriod(mixed $payment_instrument_minimum_validity_period): static
    {
        if (is_null($payment_instrument_minimum_validity_period)) {
            throw new \InvalidArgumentException('non-nullable payment_instrument_minimum_validity_period cannot be null');
        }
        $this->container['payment_instrument_minimum_validity_period'] = $payment_instrument_minimum_validity_period;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


