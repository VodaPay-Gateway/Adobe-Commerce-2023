<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class RefundpaymentResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'RefundpaymentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'payment_token' => 'string',
        'transaction_amount' => 'int',
        'transmission_date_time' => 'string',
        'system_trace_number' => 'int',
        'transaction_time' => 'string',
        'transaction_date' => 'string',
        'retrieval_reference_number' => 'string',
        'response_code' => 'string',
        'merchant_id' => 'string',
        'currency_code' => 'string',
        'transaction_id' => 'string',
        'echo_data' => 'string',
        'response_message' => 'string',
        'retrieval_reference_number_extended' => 'string',
        'session_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'payment_token' => null,
        'transaction_amount' => 'int32',
        'transmission_date_time' => null,
        'system_trace_number' => 'int32',
        'transaction_time' => null,
        'transaction_date' => null,
        'retrieval_reference_number' => null,
        'response_code' => null,
        'merchant_id' => null,
        'currency_code' => null,
        'transaction_id' => null,
        'echo_data' => null,
        'response_message' => null,
        'retrieval_reference_number_extended' => null,
        'session_id' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'payment_token' => false,
        'transaction_amount' => false,
        'transmission_date_time' => false,
        'system_trace_number' => false,
        'transaction_time' => false,
        'transaction_date' => false,
        'retrieval_reference_number' => false,
        'response_code' => false,
        'merchant_id' => false,
        'currency_code' => false,
        'transaction_id' => false,
        'echo_data' => false,
        'response_message' => false,
        'retrieval_reference_number_extended' => false,
        'session_id' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'payment_token' => 'paymentToken',
        'transaction_amount' => 'transactionAmount',
        'transmission_date_time' => 'transmissionDateTime',
        'system_trace_number' => 'systemTraceNumber',
        'transaction_time' => 'transactionTime',
        'transaction_date' => 'transactionDate',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'response_code' => 'responseCode',
        'merchant_id' => 'merchantId',
        'currency_code' => 'currencyCode',
        'transaction_id' => 'transactionId',
        'echo_data' => 'echoData',
        'response_message' => 'responseMessage',
        'retrieval_reference_number_extended' => 'retrievalReferenceNumberExtended',
        'session_id' => 'sessionId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'payment_token' => 'setPaymentToken',
        'transaction_amount' => 'setTransactionAmount',
        'transmission_date_time' => 'setTransmissionDateTime',
        'system_trace_number' => 'setSystemTraceNumber',
        'transaction_time' => 'setTransactionTime',
        'transaction_date' => 'setTransactionDate',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'response_code' => 'setResponseCode',
        'merchant_id' => 'setMerchantId',
        'currency_code' => 'setCurrencyCode',
        'transaction_id' => 'setTransactionId',
        'echo_data' => 'setEchoData',
        'response_message' => 'setResponseMessage',
        'retrieval_reference_number_extended' => 'setRetrievalReferenceNumberExtended',
        'session_id' => 'setSessionId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'payment_token' => 'getPaymentToken',
        'transaction_amount' => 'getTransactionAmount',
        'transmission_date_time' => 'getTransmissionDateTime',
        'system_trace_number' => 'getSystemTraceNumber',
        'transaction_time' => 'getTransactionTime',
        'transaction_date' => 'getTransactionDate',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'response_code' => 'getResponseCode',
        'merchant_id' => 'getMerchantId',
        'currency_code' => 'getCurrencyCode',
        'transaction_id' => 'getTransactionId',
        'echo_data' => 'getEchoData',
        'response_message' => 'getResponseMessage',
        'retrieval_reference_number_extended' => 'getRetrievalReferenceNumberExtended',
        'session_id' => 'getSessionId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('payment_token', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('transmission_date_time', $data ?? [], null);
        $this->setIfExists('system_trace_number', $data ?? [], null);
        $this->setIfExists('transaction_time', $data ?? [], null);
        $this->setIfExists('transaction_date', $data ?? [], null);
        $this->setIfExists('retrieval_reference_number', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('echo_data', $data ?? [], null);
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('retrieval_reference_number_extended', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        if ($this->container['system_trace_number'] === null) {
            $invalidProperties[] = "'system_trace_number' can't be null";
        }
        if ($this->container['response_code'] === null) {
            $invalidProperties[] = "'response_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_token
     *
     * @return null|string
     */
    public function getPaymentToken(): mixed
    {
        return $this->container['payment_token'];
    }

    /**
     * Sets payment_token
     *
     * @param null|string $payment_token payment_token
     */
    public function setPaymentToken(mixed $payment_token): static
    {
        if (is_null($payment_token)) {
            throw new \InvalidArgumentException('non-nullable payment_token cannot be null');
        }
        $this->container['payment_token'] = $payment_token;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return int
     */
    public function getTransactionAmount(): mixed
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param int $transaction_amount transaction_amount
     */
    public function setTransactionAmount(mixed $transaction_amount): static
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets transmission_date_time
     *
     * @return null|string
     */
    public function getTransmissionDateTime(): mixed
    {
        return $this->container['transmission_date_time'];
    }

    /**
     * Sets transmission_date_time
     *
     * @param null|string $transmission_date_time transmission_date_time
     */
    public function setTransmissionDateTime(mixed $transmission_date_time): static
    {
        if (is_null($transmission_date_time)) {
            throw new \InvalidArgumentException('non-nullable transmission_date_time cannot be null');
        }
        $this->container['transmission_date_time'] = $transmission_date_time;

        return $this;
    }

    /**
     * Gets system_trace_number
     *
     * @return int
     */
    public function getSystemTraceNumber(): mixed
    {
        return $this->container['system_trace_number'];
    }

    /**
     * Sets system_trace_number
     *
     * @param int $system_trace_number system_trace_number
     */
    public function setSystemTraceNumber(mixed $system_trace_number): static
    {
        if (is_null($system_trace_number)) {
            throw new \InvalidArgumentException('non-nullable system_trace_number cannot be null');
        }
        $this->container['system_trace_number'] = $system_trace_number;

        return $this;
    }

    /**
     * Gets transaction_time
     *
     * @return null|string
     */
    public function getTransactionTime(): mixed
    {
        return $this->container['transaction_time'];
    }

    /**
     * Sets transaction_time
     *
     * @param null|string $transaction_time transaction_time
     */
    public function setTransactionTime(mixed $transaction_time): static
    {
        if (is_null($transaction_time)) {
            throw new \InvalidArgumentException('non-nullable transaction_time cannot be null');
        }
        $this->container['transaction_time'] = $transaction_time;

        return $this;
    }

    /**
     * Gets transaction_date
     *
     * @return null|string
     */
    public function getTransactionDate(): mixed
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param null|string $transaction_date transaction_date
     */
    public function setTransactionDate(mixed $transaction_date): static
    {
        if (is_null($transaction_date)) {
            throw new \InvalidArgumentException('non-nullable transaction_date cannot be null');
        }
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     *
     * @return null|string
     */
    public function getRetrievalReferenceNumber(): mixed
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     *
     * @param null|string $retrieval_reference_number retrieval_reference_number
     */
    public function setRetrievalReferenceNumber(mixed $retrieval_reference_number): static
    {
        if (is_null($retrieval_reference_number)) {
            throw new \InvalidArgumentException('non-nullable retrieval_reference_number cannot be null');
        }
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return string
     */
    public function getResponseCode(): mixed
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param string $response_code response_code
     */
    public function setResponseCode(mixed $response_code): static
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return null|string
     */
    public function getMerchantId(): mixed
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param null|string $merchant_id merchant_id
     */
    public function setMerchantId(mixed $merchant_id): static
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return null|string
     */
    public function getCurrencyCode(): mixed
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param null|string $currency_code currency_code
     */
    public function setCurrencyCode(mixed $currency_code): static
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return null|string
     */
    public function getTransactionId(): mixed
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param null|string $transaction_id transaction_id
     */
    public function setTransactionId(mixed $transaction_id): static
    {
        if (is_null($transaction_id)) {
            throw new \InvalidArgumentException('non-nullable transaction_id cannot be null');
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets echo_data
     *
     * @return null|string
     */
    public function getEchoData(): mixed
    {
        return $this->container['echo_data'];
    }

    /**
     * Sets echo_data
     *
     * @param null|string $echo_data echo_data
     */
    public function setEchoData(mixed $echo_data): static
    {
        if (is_null($echo_data)) {
            throw new \InvalidArgumentException('non-nullable echo_data cannot be null');
        }
        $this->container['echo_data'] = $echo_data;

        return $this;
    }

    /**
     * Gets response_message
     *
     * @return null|string
     */
    public function getResponseMessage(): mixed
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param null|string $response_message response_message
     */
    public function setResponseMessage(mixed $response_message): static
    {
        if (is_null($response_message)) {
            throw new \InvalidArgumentException('non-nullable response_message cannot be null');
        }
        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets retrieval_reference_number_extended
     *
     * @return null|string
     */
    public function getRetrievalReferenceNumberExtended(): mixed
    {
        return $this->container['retrieval_reference_number_extended'];
    }

    /**
     * Sets retrieval_reference_number_extended
     *
     * @param null|string $retrieval_reference_number_extended retrieval_reference_number_extended
     */
    public function setRetrievalReferenceNumberExtended(mixed $retrieval_reference_number_extended): static
    {
        if (is_null($retrieval_reference_number_extended)) {
            throw new \InvalidArgumentException('non-nullable retrieval_reference_number_extended cannot be null');
        }
        $this->container['retrieval_reference_number_extended'] = $retrieval_reference_number_extended;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return null|string
     */
    public function getSessionId(): mixed
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param null|string $session_id session_id
     */
    public function setSessionId(mixed $session_id): static
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


