<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class BasketItems implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'BasketItems';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'line_number' => 'string',
        'id' => 'string',
        'barcode' => 'string',
        'description' => 'string',
        'quantity' => 'int',
        'amount_ex_vat' => 'int',
        'amount_vat' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'line_number' => null,
        'id' => null,
        'barcode' => null,
        'description' => null,
        'quantity' => 'int32',
        'amount_ex_vat' => 'int32',
        'amount_vat' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'line_number' => false,
        'id' => false,
        'barcode' => false,
        'description' => false,
        'quantity' => false,
        'amount_ex_vat' => false,
        'amount_vat' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'line_number' => 'lineNumber',
        'id' => 'id',
        'barcode' => 'barcode',
        'description' => 'description',
        'quantity' => 'quantity',
        'amount_ex_vat' => 'amountExVAT',
        'amount_vat' => 'amountVAT',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'line_number' => 'setLineNumber',
        'id' => 'setId',
        'barcode' => 'setBarcode',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'amount_ex_vat' => 'setAmountExVat',
        'amount_vat' => 'setAmountVat',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'line_number' => 'getLineNumber',
        'id' => 'getId',
        'barcode' => 'getBarcode',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'amount_ex_vat' => 'getAmountExVat',
        'amount_vat' => 'getAmountVat',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('line_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('amount_ex_vat', $data ?? [], null);
        $this->setIfExists('amount_vat', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['amount_ex_vat'] === null) {
            $invalidProperties[] = "'amount_ex_vat' can't be null";
        }
        if ($this->container['amount_vat'] === null) {
            $invalidProperties[] = "'amount_vat' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_number
     *
     * @return null|string
     */
    public function getLineNumber(): mixed
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param null|string $line_number line_number
     */
    public function setLineNumber(mixed $line_number): static
    {
        if (is_null($line_number)) {
            throw new \InvalidArgumentException('non-nullable line_number cannot be null');
        }
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return null|string
     */
    public function getId(): mixed
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param null|string $id id
     */
    public function setId(mixed $id): static
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return null|string
     */
    public function getBarcode(): mixed
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param null|string $barcode barcode
     */
    public function setBarcode(mixed $barcode): static
    {
        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return null|string
     */
    public function getDescription(): mixed
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param null|string $description description
     */
    public function setDescription(mixed $description): static
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity(): mixed
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     */
    public function setQuantity(mixed $quantity): static
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets amount_ex_vat
     *
     * @return int
     */
    public function getAmountExVat(): mixed
    {
        return $this->container['amount_ex_vat'];
    }

    /**
     * Sets amount_ex_vat
     *
     * @param int $amount_ex_vat amount_ex_vat
     */
    public function setAmountExVat(mixed $amount_ex_vat): static
    {
        if (is_null($amount_ex_vat)) {
            throw new \InvalidArgumentException('non-nullable amount_ex_vat cannot be null');
        }
        $this->container['amount_ex_vat'] = $amount_ex_vat;

        return $this;
    }

    /**
     * Gets amount_vat
     *
     * @return int
     */
    public function getAmountVat(): mixed
    {
        return $this->container['amount_vat'];
    }

    /**
     * Sets amount_vat
     *
     * @param int $amount_vat amount_vat
     */
    public function setAmountVat(mixed $amount_vat): static
    {
        if (is_null($amount_vat)) {
            throw new \InvalidArgumentException('non-nullable amount_vat cannot be null');
        }
        $this->container['amount_vat'] = $amount_vat;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


