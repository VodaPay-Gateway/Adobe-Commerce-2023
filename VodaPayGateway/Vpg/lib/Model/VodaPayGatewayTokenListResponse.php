<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class VodaPayGatewayTokenListResponse implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'VodaPayGatewayTokenListResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'response_message' => 'string',
        'response_code' => 'string',
        'echo_data' => 'string',
        'token_requester_id' => 'string',
        'trace_id' => 'string',
        'session_id' => 'string',
        'payment_tokens' => '\VodaPayGatewayClient\Model\PaymentToken[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'response_message' => null,
        'response_code' => null,
        'echo_data' => null,
        'token_requester_id' => null,
        'trace_id' => null,
        'session_id' => null,
        'payment_tokens' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'response_message' => false,
        'response_code' => false,
        'echo_data' => false,
        'token_requester_id' => false,
        'trace_id' => false,
        'session_id' => false,
        'payment_tokens' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'response_message' => 'responseMessage',
        'response_code' => 'responseCode',
        'echo_data' => 'echoData',
        'token_requester_id' => 'tokenRequesterId',
        'trace_id' => 'traceId',
        'session_id' => 'sessionId',
        'payment_tokens' => 'paymentTokens',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'response_message' => 'setResponseMessage',
        'response_code' => 'setResponseCode',
        'echo_data' => 'setEchoData',
        'token_requester_id' => 'setTokenRequesterId',
        'trace_id' => 'setTraceId',
        'session_id' => 'setSessionId',
        'payment_tokens' => 'setPaymentTokens',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'response_message' => 'getResponseMessage',
        'response_code' => 'getResponseCode',
        'echo_data' => 'getEchoData',
        'token_requester_id' => 'getTokenRequesterId',
        'trace_id' => 'getTraceId',
        'session_id' => 'getSessionId',
        'payment_tokens' => 'getPaymentTokens',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('response_message', $data ?? [], null);
        $this->setIfExists('response_code', $data ?? [], null);
        $this->setIfExists('echo_data', $data ?? [], null);
        $this->setIfExists('token_requester_id', $data ?? [], null);
        $this->setIfExists('trace_id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('payment_tokens', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets response_message
     *
     * @return null|string
     */
    public function getResponseMessage(): mixed
    {
        return $this->container['response_message'];
    }

    /**
     * Sets response_message
     *
     * @param null|string $response_message response_message
     */
    public function setResponseMessage(mixed $response_message): static
    {
        if (is_null($response_message)) {
            throw new \InvalidArgumentException('non-nullable response_message cannot be null');
        }
        $this->container['response_message'] = $response_message;

        return $this;
    }

    /**
     * Gets response_code
     *
     * @return null|string
     */
    public function getResponseCode(): mixed
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     *
     * @param null|string $response_code response_code
     */
    public function setResponseCode(mixed $response_code): static
    {
        if (is_null($response_code)) {
            throw new \InvalidArgumentException('non-nullable response_code cannot be null');
        }
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets echo_data
     *
     * @return null|string
     */
    public function getEchoData(): mixed
    {
        return $this->container['echo_data'];
    }

    /**
     * Sets echo_data
     *
     * @param null|string $echo_data echo_data
     */
    public function setEchoData(mixed $echo_data): static
    {
        if (is_null($echo_data)) {
            throw new \InvalidArgumentException('non-nullable echo_data cannot be null');
        }
        $this->container['echo_data'] = $echo_data;

        return $this;
    }

    /**
     * Gets token_requester_id
     *
     * @return null|string
     */
    public function getTokenRequesterId(): mixed
    {
        return $this->container['token_requester_id'];
    }

    /**
     * Sets token_requester_id
     *
     * @param null|string $token_requester_id token_requester_id
     */
    public function setTokenRequesterId(mixed $token_requester_id): static
    {
        if (is_null($token_requester_id)) {
            throw new \InvalidArgumentException('non-nullable token_requester_id cannot be null');
        }
        $this->container['token_requester_id'] = $token_requester_id;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return null|string
     */
    public function getTraceId(): mixed
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param null|string $trace_id trace_id
     */
    public function setTraceId(mixed $trace_id): static
    {
        if (is_null($trace_id)) {
            throw new \InvalidArgumentException('non-nullable trace_id cannot be null');
        }
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return null|string
     */
    public function getSessionId(): mixed
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param null|string $session_id session_id
     */
    public function setSessionId(mixed $session_id): static
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets payment_tokens
     *
     * @return null|\VodaPayGatewayClient\Model\PaymentToken[]
     */
    public function getPaymentTokens(): mixed
    {
        return $this->container['payment_tokens'];
    }

    /**
     * Sets payment_tokens
     *
     * @param null|\VodaPayGatewayClient\Model\PaymentToken[] $payment_tokens payment_tokens
     */
    public function setPaymentTokens(mixed $payment_tokens): static
    {
        if (is_null($payment_tokens)) {
            throw new \InvalidArgumentException('non-nullable payment_tokens cannot be null');
        }
        $this->container['payment_tokens'] = $payment_tokens;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


