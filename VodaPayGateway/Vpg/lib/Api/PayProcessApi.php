<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VodaPayGatewayClient\ApiException;
use VodaPayGatewayClient\Configuration;
use VodaPayGatewayClient\HeaderSelector;
use VodaPayGatewayClient\ObjectSerializer;

class PayProcessApi
{
    /**
     * @var array<string, list<string>>
     */
    public const contentTypes = [
        'payProcessOnceOff' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        private readonly ClientInterface $client = new Client(),
        private readonly Configuration $config = new Configuration(),
        private readonly HeaderSelector $headerSelector = new HeaderSelector(),
        private int $hostIndex = 0,
    ) {
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * payProcessOnceOff: Immediate payment intent form post.
     *
     * @param  string $api_key Gets or sets the API key. (optional)
     * @param  bool $delay_settlement Gets or sets a value indicating whether [delay settlement]. (optional)
     * @param  bool $is_testing Gets or sets a value indicating whether this instance is testing. (optional)
     * @param  string $echo_data Gets or sets the echo data. (optional)
     * @param  string $trace_id Gets or sets the trace identifier. (optional)
     * @param  int $amount Gets or sets the amount. (optional)
     * @param  string $additional_data Gets or sets the additional data. (optional)
     * @param  string $customer_id Gets or sets the customer identifier. (optional)
     * @param  string $digital_wallet_id Gets or sets the digital wallet identifier. (optional)
     * @param  string $callback_url Gets or sets the callback URL. (optional)
     * @param  string $notification_url Gets or sets the notification URL. (optional)
     * @param  string $logo_url Gets or sets the logo URL. (optional)
     * @param  string $banner_url Gets or sets the banner URL. (optional)
     * @param  string $theme Gets or sets the theme. (optional)
     * @param  \VodaPayGatewayClient\Model\BasketItemsProcess[] $basket Gets or sets the basket. (optional)
     * @param  string $msisdn Gets or sets the msisdn. (optional)
     * @param  string $message Gets or sets the message. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payProcessOnceOff'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \VodaPayGatewayClient\Model\VodaPayGatewayResponse|\VodaPayGatewayClient\Model\VodaPayGatewayResponse
     */
    public function payProcessOnceOff(
        mixed $api_key = null,
        mixed $delay_settlement = null,
        mixed $is_testing = null,
        mixed $echo_data = null,
        mixed $trace_id = null,
        mixed $amount = null,
        mixed $additional_data = null,
        mixed $customer_id = null,
        mixed $digital_wallet_id = null,
        mixed $callback_url = null,
        mixed $notification_url = null,
        mixed $logo_url = null,
        mixed $banner_url = null,
        mixed $theme = null,
        mixed $basket = null,
        mixed $msisdn = null,
        mixed $message = null,
        string $contentType = self::contentTypes['payProcessOnceOff'][0],
    ): mixed {
        list($response) = $this->payProcessOnceOffWithHttpInfo($api_key, $delay_settlement, $is_testing, $echo_data, $trace_id, $amount, $additional_data, $customer_id, $digital_wallet_id, $callback_url, $notification_url, $logo_url, $banner_url, $theme, $basket, $msisdn, $message, $contentType);

        return $response;
    }

    /**
     * payProcessOnceOffWithHttpInfo: Immediate payment intent form post.
     *
     * @param  string $api_key Gets or sets the API key. (optional)
     * @param  bool $delay_settlement Gets or sets a value indicating whether [delay settlement]. (optional)
     * @param  bool $is_testing Gets or sets a value indicating whether this instance is testing. (optional)
     * @param  string $echo_data Gets or sets the echo data. (optional)
     * @param  string $trace_id Gets or sets the trace identifier. (optional)
     * @param  int $amount Gets or sets the amount. (optional)
     * @param  string $additional_data Gets or sets the additional data. (optional)
     * @param  string $customer_id Gets or sets the customer identifier. (optional)
     * @param  string $digital_wallet_id Gets or sets the digital wallet identifier. (optional)
     * @param  string $callback_url Gets or sets the callback URL. (optional)
     * @param  string $notification_url Gets or sets the notification URL. (optional)
     * @param  string $logo_url Gets or sets the logo URL. (optional)
     * @param  string $banner_url Gets or sets the banner URL. (optional)
     * @param  string $theme Gets or sets the theme. (optional)
     * @param  \VodaPayGatewayClient\Model\BasketItemsProcess[] $basket Gets or sets the basket. (optional)
     * @param  string $msisdn Gets or sets the msisdn. (optional)
     * @param  string $message Gets or sets the message. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payProcessOnceOff'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \VodaPayGatewayClient\Model\VodaPayGatewayResponse|\VodaPayGatewayClient\Model\VodaPayGatewayResponse,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function payProcessOnceOffWithHttpInfo(
        mixed $api_key = null,
        mixed $delay_settlement = null,
        mixed $is_testing = null,
        mixed $echo_data = null,
        mixed $trace_id = null,
        mixed $amount = null,
        mixed $additional_data = null,
        mixed $customer_id = null,
        mixed $digital_wallet_id = null,
        mixed $callback_url = null,
        mixed $notification_url = null,
        mixed $logo_url = null,
        mixed $banner_url = null,
        mixed $theme = null,
        mixed $basket = null,
        mixed $msisdn = null,
        mixed $message = null,
        string $contentType = self::contentTypes['payProcessOnceOff'][0],
    ): array {
        $request = $this->payProcessOnceOffRequest($api_key, $delay_settlement, $is_testing, $echo_data, $trace_id, $amount, $additional_data, $customer_id, $digital_wallet_id, $callback_url, $notification_url, $logo_url, $banner_url, $theme, $basket, $msisdn, $message, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\VodaPayGatewayClient\Model\VodaPayGatewayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\VodaPayGatewayClient\Model\VodaPayGatewayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\VodaPayGatewayClient\Model\VodaPayGatewayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\VodaPayGatewayClient\Model\VodaPayGatewayResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\VodaPayGatewayClient\Model\VodaPayGatewayResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\VodaPayGatewayClient\Model\VodaPayGatewayResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\VodaPayGatewayClient\Model\VodaPayGatewayResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VodaPayGatewayClient\Model\VodaPayGatewayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VodaPayGatewayClient\Model\VodaPayGatewayResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * payProcessOnceOffAsync: Immediate payment intent form post.
     *
     * @param  string $api_key Gets or sets the API key. (optional)
     * @param  bool $delay_settlement Gets or sets a value indicating whether [delay settlement]. (optional)
     * @param  bool $is_testing Gets or sets a value indicating whether this instance is testing. (optional)
     * @param  string $echo_data Gets or sets the echo data. (optional)
     * @param  string $trace_id Gets or sets the trace identifier. (optional)
     * @param  int $amount Gets or sets the amount. (optional)
     * @param  string $additional_data Gets or sets the additional data. (optional)
     * @param  string $customer_id Gets or sets the customer identifier. (optional)
     * @param  string $digital_wallet_id Gets or sets the digital wallet identifier. (optional)
     * @param  string $callback_url Gets or sets the callback URL. (optional)
     * @param  string $notification_url Gets or sets the notification URL. (optional)
     * @param  string $logo_url Gets or sets the logo URL. (optional)
     * @param  string $banner_url Gets or sets the banner URL. (optional)
     * @param  string $theme Gets or sets the theme. (optional)
     * @param  \VodaPayGatewayClient\Model\BasketItemsProcess[] $basket Gets or sets the basket. (optional)
     * @param  string $msisdn Gets or sets the msisdn. (optional)
     * @param  string $message Gets or sets the message. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payProcessOnceOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function payProcessOnceOffAsync(
        mixed $api_key = null,
        mixed $delay_settlement = null,
        mixed $is_testing = null,
        mixed $echo_data = null,
        mixed $trace_id = null,
        mixed $amount = null,
        mixed $additional_data = null,
        mixed $customer_id = null,
        mixed $digital_wallet_id = null,
        mixed $callback_url = null,
        mixed $notification_url = null,
        mixed $logo_url = null,
        mixed $banner_url = null,
        mixed $theme = null,
        mixed $basket = null,
        mixed $msisdn = null,
        mixed $message = null,
        string $contentType = self::contentTypes['payProcessOnceOff'][0],
    ): PromiseInterface {
        return $this->payProcessOnceOffAsyncWithHttpInfo($api_key, $delay_settlement, $is_testing, $echo_data, $trace_id, $amount, $additional_data, $customer_id, $digital_wallet_id, $callback_url, $notification_url, $logo_url, $banner_url, $theme, $basket, $msisdn, $message, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * payProcessOnceOffAsyncWithHttpInfo: Immediate payment intent form post.
     *
     * @param  string $api_key Gets or sets the API key. (optional)
     * @param  bool $delay_settlement Gets or sets a value indicating whether [delay settlement]. (optional)
     * @param  bool $is_testing Gets or sets a value indicating whether this instance is testing. (optional)
     * @param  string $echo_data Gets or sets the echo data. (optional)
     * @param  string $trace_id Gets or sets the trace identifier. (optional)
     * @param  int $amount Gets or sets the amount. (optional)
     * @param  string $additional_data Gets or sets the additional data. (optional)
     * @param  string $customer_id Gets or sets the customer identifier. (optional)
     * @param  string $digital_wallet_id Gets or sets the digital wallet identifier. (optional)
     * @param  string $callback_url Gets or sets the callback URL. (optional)
     * @param  string $notification_url Gets or sets the notification URL. (optional)
     * @param  string $logo_url Gets or sets the logo URL. (optional)
     * @param  string $banner_url Gets or sets the banner URL. (optional)
     * @param  string $theme Gets or sets the theme. (optional)
     * @param  \VodaPayGatewayClient\Model\BasketItemsProcess[] $basket Gets or sets the basket. (optional)
     * @param  string $msisdn Gets or sets the msisdn. (optional)
     * @param  string $message Gets or sets the message. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payProcessOnceOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function payProcessOnceOffAsyncWithHttpInfo(
        mixed $api_key = null,
        mixed $delay_settlement = null,
        mixed $is_testing = null,
        mixed $echo_data = null,
        mixed $trace_id = null,
        mixed $amount = null,
        mixed $additional_data = null,
        mixed $customer_id = null,
        mixed $digital_wallet_id = null,
        mixed $callback_url = null,
        mixed $notification_url = null,
        mixed $logo_url = null,
        mixed $banner_url = null,
        mixed $theme = null,
        mixed $basket = null,
        mixed $msisdn = null,
        mixed $message = null,
        string $contentType = self::contentTypes['payProcessOnceOff'][0],
    ): PromiseInterface {
        $returnType = '\VodaPayGatewayClient\Model\VodaPayGatewayResponse';
        $request = $this->payProcessOnceOffRequest($api_key, $delay_settlement, $is_testing, $echo_data, $trace_id, $amount, $additional_data, $customer_id, $digital_wallet_id, $callback_url, $notification_url, $logo_url, $banner_url, $theme, $basket, $msisdn, $message, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payProcessOnceOff'
     *
     * @param  string $api_key Gets or sets the API key. (optional)
     * @param  bool $delay_settlement Gets or sets a value indicating whether [delay settlement]. (optional)
     * @param  bool $is_testing Gets or sets a value indicating whether this instance is testing. (optional)
     * @param  string $echo_data Gets or sets the echo data. (optional)
     * @param  string $trace_id Gets or sets the trace identifier. (optional)
     * @param  int $amount Gets or sets the amount. (optional)
     * @param  string $additional_data Gets or sets the additional data. (optional)
     * @param  string $customer_id Gets or sets the customer identifier. (optional)
     * @param  string $digital_wallet_id Gets or sets the digital wallet identifier. (optional)
     * @param  string $callback_url Gets or sets the callback URL. (optional)
     * @param  string $notification_url Gets or sets the notification URL. (optional)
     * @param  string $logo_url Gets or sets the logo URL. (optional)
     * @param  string $banner_url Gets or sets the banner URL. (optional)
     * @param  string $theme Gets or sets the theme. (optional)
     * @param  \VodaPayGatewayClient\Model\BasketItemsProcess[] $basket Gets or sets the basket. (optional)
     * @param  string $msisdn Gets or sets the msisdn. (optional)
     * @param  string $message Gets or sets the message. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payProcessOnceOff'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function payProcessOnceOffRequest(
        mixed $api_key = null,
        mixed $delay_settlement = null,
        mixed $is_testing = null,
        mixed $echo_data = null,
        mixed $trace_id = null,
        mixed $amount = null,
        mixed $additional_data = null,
        mixed $customer_id = null,
        mixed $digital_wallet_id = null,
        mixed $callback_url = null,
        mixed $notification_url = null,
        mixed $logo_url = null,
        mixed $banner_url = null,
        mixed $theme = null,
        mixed $basket = null,
        mixed $msisdn = null,
        mixed $message = null,
        string $contentType = self::contentTypes['payProcessOnceOff'][0],
    ): Request {

















        $resourcePath = '/v2/PayProcess/OnceOff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($api_key !== null) {
            $formParams['ApiKey'] = ObjectSerializer::toFormValue($api_key);
        }

        // form params
        if ($delay_settlement !== null) {
            $formParams['DelaySettlement'] = ObjectSerializer::toFormValue($delay_settlement);
        }

        // form params
        if ($is_testing !== null) {
            $formParams['IsTesting'] = ObjectSerializer::toFormValue($is_testing);
        }

        // form params
        if ($echo_data !== null) {
            $formParams['EchoData'] = ObjectSerializer::toFormValue($echo_data);
        }

        // form params
        if ($trace_id !== null) {
            $formParams['TraceId'] = ObjectSerializer::toFormValue($trace_id);
        }

        // form params
        if ($amount !== null) {
            $formParams['Amount'] = ObjectSerializer::toFormValue($amount);
        }

        // form params
        if ($additional_data !== null) {
            $formParams['AdditionalData'] = ObjectSerializer::toFormValue($additional_data);
        }

        // form params
        if ($customer_id !== null) {
            $formParams['CustomerId'] = ObjectSerializer::toFormValue($customer_id);
        }

        // form params
        if ($digital_wallet_id !== null) {
            $formParams['DigitalWalletId'] = ObjectSerializer::toFormValue($digital_wallet_id);
        }

        // form params
        if ($callback_url !== null) {
            $formParams['CallbackUrl'] = ObjectSerializer::toFormValue($callback_url);
        }

        // form params
        if ($notification_url !== null) {
            $formParams['NotificationUrl'] = ObjectSerializer::toFormValue($notification_url);
        }

        // form params
        if ($logo_url !== null) {
            $formParams['LogoUrl'] = ObjectSerializer::toFormValue($logo_url);
        }

        // form params
        if ($banner_url !== null) {
            $formParams['BannerUrl'] = ObjectSerializer::toFormValue($banner_url);
        }

        // form params
        if ($theme !== null) {
            $formParams['Theme'] = ObjectSerializer::toFormValue($theme);
        }

        // form params
        if ($basket !== null) {
            $formParams['Basket'] = ObjectSerializer::toFormValue($basket);
        }

        // form params
        if ($msisdn !== null) {
            $formParams['Msisdn'] = ObjectSerializer::toFormValue($msisdn);
        }

        // form params
        if ($message !== null) {
            $formParams['Message'] = ObjectSerializer::toFormValue($message);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
