<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Model;

use VodaPayGatewayClient\ObjectSerializer;

/**
 * @implements \ArrayAccess<string, mixed>
 */
class VodaPayGatewayAuthenticateToken implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      */
    protected static string $openAPIModelName = 'VodaPayGatewayAuthenticateToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'echo_data' => 'string',
        'trace_id' => 'string',
        'payment_token' => 'string',
        'amount' => 'int',
        'customer_id' => 'string',
        'digital_wallet_id' => 'string',
        'recurring' => '\VodaPayGatewayClient\Model\Recurring2',
        'notifications' => '\VodaPayGatewayClient\Model\Notifications',
        'styling' => '\VodaPayGatewayClient\Model\Styling',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, null|string>
      */
    protected static array $openAPIFormats = [
        'echo_data' => null,
        'trace_id' => null,
        'payment_token' => null,
        'amount' => 'int32',
        'customer_id' => null,
        'digital_wallet_id' => null,
        'recurring' => null,
        'notifications' => null,
        'styling' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'echo_data' => false,
        'trace_id' => false,
        'payment_token' => false,
        'amount' => false,
        'customer_id' => false,
        'digital_wallet_id' => false,
        'recurring' => false,
        'notifications' => false,
        'styling' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, null|string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'echo_data' => 'echoData',
        'trace_id' => 'traceId',
        'payment_token' => 'paymentToken',
        'amount' => 'amount',
        'customer_id' => 'customerId',
        'digital_wallet_id' => 'digitalWalletId',
        'recurring' => 'recurring',
        'notifications' => 'notifications',
        'styling' => 'styling',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'echo_data' => 'setEchoData',
        'trace_id' => 'setTraceId',
        'payment_token' => 'setPaymentToken',
        'amount' => 'setAmount',
        'customer_id' => 'setCustomerId',
        'digital_wallet_id' => 'setDigitalWalletId',
        'recurring' => 'setRecurring',
        'notifications' => 'setNotifications',
        'styling' => 'setStyling',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'echo_data' => 'getEchoData',
        'trace_id' => 'getTraceId',
        'payment_token' => 'getPaymentToken',
        'amount' => 'getAmount',
        'customer_id' => 'getCustomerId',
        'digital_wallet_id' => 'getDigitalWalletId',
        'recurring' => 'getRecurring',
        'notifications' => 'getNotifications',
        'styling' => 'getStyling',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @phpstan-var array<string, mixed>
     * @psalm-var array<string, mixed>
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array<string, mixed> $data Associated array of property values
     *                                   initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('echo_data', $data ?? [], null);
        $this->setIfExists('trace_id', $data ?? [], null);
        $this->setIfExists('payment_token', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('digital_wallet_id', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
        $this->setIfExists('notifications', $data ?? [], null);
        $this->setIfExists('styling', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param array<string, mixed> $fields
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return list<string> invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets echo_data
     *
     * @return null|string
     */
    public function getEchoData(): mixed
    {
        return $this->container['echo_data'];
    }

    /**
     * Sets echo_data
     *
     * @param null|string $echo_data echo_data
     */
    public function setEchoData(mixed $echo_data): static
    {
        if (is_null($echo_data)) {
            throw new \InvalidArgumentException('non-nullable echo_data cannot be null');
        }
        $this->container['echo_data'] = $echo_data;

        return $this;
    }

    /**
     * Gets trace_id
     *
     * @return null|string
     */
    public function getTraceId(): mixed
    {
        return $this->container['trace_id'];
    }

    /**
     * Sets trace_id
     *
     * @param null|string $trace_id trace_id
     */
    public function setTraceId(mixed $trace_id): static
    {
        if (is_null($trace_id)) {
            throw new \InvalidArgumentException('non-nullable trace_id cannot be null');
        }
        $this->container['trace_id'] = $trace_id;

        return $this;
    }

    /**
     * Gets payment_token
     *
     * @return null|string
     */
    public function getPaymentToken(): mixed
    {
        return $this->container['payment_token'];
    }

    /**
     * Sets payment_token
     *
     * @param null|string $payment_token payment_token
     */
    public function setPaymentToken(mixed $payment_token): static
    {
        if (is_null($payment_token)) {
            throw new \InvalidArgumentException('non-nullable payment_token cannot be null');
        }
        $this->container['payment_token'] = $payment_token;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount(): mixed
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     */
    public function setAmount(mixed $amount): static
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return null|string
     */
    public function getCustomerId(): mixed
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param null|string $customer_id customer_id
     */
    public function setCustomerId(mixed $customer_id): static
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets digital_wallet_id
     *
     * @return null|string
     */
    public function getDigitalWalletId(): mixed
    {
        return $this->container['digital_wallet_id'];
    }

    /**
     * Sets digital_wallet_id
     *
     * @param null|string $digital_wallet_id digital_wallet_id
     */
    public function setDigitalWalletId(mixed $digital_wallet_id): static
    {
        if (is_null($digital_wallet_id)) {
            throw new \InvalidArgumentException('non-nullable digital_wallet_id cannot be null');
        }
        $this->container['digital_wallet_id'] = $digital_wallet_id;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return null|\VodaPayGatewayClient\Model\Recurring2
     */
    public function getRecurring(): mixed
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param null|\VodaPayGatewayClient\Model\Recurring2 $recurring recurring
     */
    public function setRecurring(mixed $recurring): static
    {
        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return null|\VodaPayGatewayClient\Model\Notifications
     */
    public function getNotifications(): mixed
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param null|\VodaPayGatewayClient\Model\Notifications $notifications notifications
     */
    public function setNotifications(mixed $notifications): static
    {
        if (is_null($notifications)) {
            throw new \InvalidArgumentException('non-nullable notifications cannot be null');
        }
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets styling
     *
     * @return null|\VodaPayGatewayClient\Model\Styling
     */
    public function getStyling(): mixed
    {
        return $this->container['styling'];
    }

    /**
     * Sets styling
     *
     * @param null|\VodaPayGatewayClient\Model\Styling $styling styling
     */
    public function setStyling(mixed $styling): static
    {
        if (is_null($styling)) {
            throw new \InvalidArgumentException('non-nullable styling cannot be null');
        }
        $this->container['styling'] = $styling;

        return $this;
    }
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT,
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


