<?php

declare(strict_types=1);

/**
 * VodaPay Gateway
 *
 * Enabling ecommerce merchants to accept online payments from customers.
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace VodaPayGatewayClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VodaPayGatewayClient\ApiException;
use VodaPayGatewayClient\Configuration;
use VodaPayGatewayClient\HeaderSelector;
use VodaPayGatewayClient\ObjectSerializer;

class WebhookApi
{
    /**
     * @var array<string, list<string>>
     */
    public const contentTypes = [
        'webhookShopifyRedactCustomer' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'webhookShopifyRedactShop' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'webhookShopifyViewCustomer' => [
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        private readonly ClientInterface $client = new Client(),
        private readonly Configuration $config = new Configuration(),
        private readonly HeaderSelector $headerSelector = new HeaderSelector(),
        private int $hostIndex = 0,
    ) {
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * webhookShopifyRedactCustomer: Shopify payment - Once Off.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactCustomer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \SplFileObject
     */
    public function webhookShopifyRedactCustomer(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactCustomer'][0],
    ): mixed {
        list($response) = $this->webhookShopifyRedactCustomerWithHttpInfo($data, $contentType);

        return $response;
    }

    /**
     * webhookShopifyRedactCustomerWithHttpInfo: Shopify payment - Once Off.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactCustomer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \SplFileObject,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function webhookShopifyRedactCustomerWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactCustomer'][0],
    ): array {
        $request = $this->webhookShopifyRedactCustomerRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * webhookShopifyRedactCustomerAsync: Shopify payment - Once Off.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactCustomerAsync(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactCustomer'][0],
    ): PromiseInterface {
        return $this->webhookShopifyRedactCustomerAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * webhookShopifyRedactCustomerAsyncWithHttpInfo: Shopify payment - Once Off.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactCustomerAsyncWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactCustomer'][0],
    ): PromiseInterface {
        $returnType = '\SplFileObject';
        $request = $this->webhookShopifyRedactCustomerRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhookShopifyRedactCustomer'
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactCustomerRequest(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactCustomer'][0],
    ): Request {
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling webhookShopifyRedactCustomer'
            );
        }

        $resourcePath = '/v2/Shopify/Webhook/RedactCustomer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * webhookShopifyRedactShop: Shopify Webhook.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactShop'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \SplFileObject
     */
    public function webhookShopifyRedactShop(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactShop'][0],
    ): mixed {
        list($response) = $this->webhookShopifyRedactShopWithHttpInfo($data, $contentType);

        return $response;
    }

    /**
     * webhookShopifyRedactShopWithHttpInfo: Shopify Webhook.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactShop'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \SplFileObject,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function webhookShopifyRedactShopWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactShop'][0],
    ): array {
        $request = $this->webhookShopifyRedactShopRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * webhookShopifyRedactShopAsync: Shopify Webhook.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactShopAsync(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactShop'][0],
    ): PromiseInterface {
        return $this->webhookShopifyRedactShopAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * webhookShopifyRedactShopAsyncWithHttpInfo: Shopify Webhook.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactShopAsyncWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactShop'][0],
    ): PromiseInterface {
        $returnType = '\SplFileObject';
        $request = $this->webhookShopifyRedactShopRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhookShopifyRedactShop'
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyCustomerRedact $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyRedactShop'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyRedactShopRequest(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyRedactShop'][0],
    ): Request {
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling webhookShopifyRedactShop'
            );
        }

        $resourcePath = '/v2/Shopify/Webhook/RedactShop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * webhookShopifyViewCustomer: Shopify payment - View Customer.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyViewCustomer $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyViewCustomer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return \SplFileObject
     */
    public function webhookShopifyViewCustomer(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyViewCustomer'][0],
    ): mixed {
        list($response) = $this->webhookShopifyViewCustomerWithHttpInfo($data, $contentType);

        return $response;
    }

    /**
     * webhookShopifyViewCustomerWithHttpInfo: Shopify payment - View Customer.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyViewCustomer $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyViewCustomer'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response
     * @throws GuzzleException
     * @throws \InvalidArgumentException
     *
     * @return array{
     *     \SplFileObject,
     *     int,
     *     list<string>,
     * } Array of response body, status, and response headers
     */
    public function webhookShopifyViewCustomerWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyViewCustomer'][0],
    ): array {
        $request = $this->webhookShopifyViewCustomerRequest($data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * webhookShopifyViewCustomerAsync: Shopify payment - View Customer.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyViewCustomer $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyViewCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyViewCustomerAsync(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyViewCustomer'][0],
    ): PromiseInterface {
        return $this->webhookShopifyViewCustomerAsyncWithHttpInfo($data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * webhookShopifyViewCustomerAsyncWithHttpInfo: Shopify payment - View Customer.
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyViewCustomer $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyViewCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyViewCustomerAsyncWithHttpInfo(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyViewCustomer'][0],
    ): PromiseInterface {
        $returnType = '\SplFileObject';
        $request = $this->webhookShopifyViewCustomerRequest($data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhookShopifyViewCustomer'
     *
     * @param  \VodaPayGatewayClient\Model\ShopifyViewCustomer $data The data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhookShopifyViewCustomer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function webhookShopifyViewCustomerRequest(
        mixed $data,
        string $contentType = self::contentTypes['webhookShopifyViewCustomer'][0],
    ): Request {
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling webhookShopifyViewCustomer'
            );
        }

        $resourcePath = '/v2/Shopify/Webhook/ViewCustomer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data));
            } else {
                $httpBody = $data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
